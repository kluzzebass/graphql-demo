package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.75

import (
	"context"
	"fmt"
	"sort"
	"time"

	"github.com/kluzzebass/graphql-demo/graph/model"
)

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, input model.NewPost) (*model.Post, error) {
	LogResolverDepth(ctx, "mutationResolver.CreatePost")
	_, ok := r.UserMap.Get(input.UserID)
	if !ok {
		return nil, fmt.Errorf("user not found")
	}

	if input.ID != nil {
		_, ok := r.PostMap.Get(*input.ID)
		if ok {
			return nil, fmt.Errorf("post already exists")
		}
	} else {
		bigliestID := 0
		for id := range r.PostMap.Keys() {
			if id > bigliestID {
				bigliestID = id
			}
		}
		bigliestID++
		input.ID = &bigliestID
	}

	post := &model.Post{
		ID:        *input.ID,
		Title:     input.Title,
		Ingress:   input.Ingress,
		Content:   input.Body,
		UserID:    input.UserID,
		Category:  input.Category,
		CreatedAt: time.Now(),
	}

	r.PostMap.Set(*input.ID, post)
	r.PostCreatedSub.Publish([]*model.Post{post})

	return post, nil
}

// DeletePost is the resolver for the deletePost field.
func (r *mutationResolver) DeletePost(ctx context.Context, id int) (bool, error) {
	LogResolverDepth(ctx, fmt.Sprintf("mutationResolver.DeletePost (id: %d)", id))
	_, ok := r.PostMap.Get(id)
	if !ok {
		return false, fmt.Errorf("post not found")
	}

	r.PostMap.Delete(id)
	r.PostDeletedSub.Publish([]int{id})

	return true, nil
}

// Body is the resolver for the body field.
func (r *postResolver) Body(ctx context.Context, obj *model.Post, limit *int32, offset *int32) (string, error) {
	lstr := ""
	ostr := ""
	body := obj.Content
	if offset != nil {
		ostr = fmt.Sprintf(", offset: %d", *offset)
		body = body[*offset:]
	}
	if limit != nil {
		lstr = fmt.Sprintf(", limit: %d", *limit)
		body = body[:*limit]
	}
	LogResolverDepth(ctx, fmt.Sprintf("postResolver.Body (post: %d%s%s)", obj.ID, lstr, ostr))
	return body, nil
}

// User is the resolver for the user field.
func (r *postResolver) User(ctx context.Context, obj *model.Post) (*model.User, error) {
	LogResolverDepth(ctx, fmt.Sprintf("postResolver.User (user: %d)", obj.UserID))
	user, ok := r.UserMap.Get(obj.UserID)
	if !ok {
		return nil, fmt.Errorf("user not found")
	}

	return user, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	LogResolverDepth(ctx, "queryResolver.Users")
	users := []*model.User{}
	for user := range r.UserMap.Values() {
		users = append(users, user)
	}

	// sort the users by id
	sort.Slice(users, func(i, j int) bool {
		return users[i].ID < users[j].ID
	})

	return users, nil
}

// Posts is the resolver for the posts field.
func (r *queryResolver) Posts(ctx context.Context) ([]*model.Post, error) {
	LogResolverDepth(ctx, "queryResolver.Posts")
	posts := []*model.Post{}
	for post := range r.PostMap.Values() {
		posts = append(posts, post)
	}

	// sort the posts by id
	sort.Slice(posts, func(i, j int) bool {
		return posts[i].ID < posts[j].ID
	})

	return posts, nil
}

// PostCreated is the resolver for the postCreated field.
func (r *subscriptionResolver) PostCreated(ctx context.Context) (<-chan *model.Post, error) {
	LogResolverDepth(ctx, "subscriptionResolver.PostCreated")
	sub := r.PostCreatedSub.Subscribe(ctx, func(msg *model.Post) bool {
		return true
	})

	return sub.Chan(), nil
}

// PostDeleted is the resolver for the postDeleted field.
func (r *subscriptionResolver) PostDeleted(ctx context.Context) (<-chan int, error) {
	LogResolverDepth(ctx, "subscriptionResolver.PostDeleted")
	sub := r.PostDeletedSub.Subscribe(ctx, func(msg int) bool {
		return true
	})

	return sub.Chan(), nil
}

// Posts is the resolver for the posts field.
func (r *userResolver) Posts(ctx context.Context, obj *model.User) ([]*model.Post, error) {
	LogResolverDepth(ctx, fmt.Sprintf("userResolver.Posts (user: %d)", obj.ID))
	posts := []*model.Post{}
	for post := range r.PostMap.Values() {
		if post.UserID == obj.ID {
			posts = append(posts, post)
		}
	}

	// sort the posts by id
	sort.Slice(posts, func(i, j int) bool {
		return posts[i].ID < posts[j].ID
	})

	return posts, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Post returns PostResolver implementation.
func (r *Resolver) Post() PostResolver { return &postResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

type mutationResolver struct{ *Resolver }
type postResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
