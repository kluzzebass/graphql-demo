package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.75

import (
	"context"
	"fmt"
	"graphql-demo/internal/graph/generated"
	"graphql-demo/internal/graph/model"
	"sort"
	"time"
)

// Post is the resolver for the post field.
func (r *commentResolver) Post(ctx context.Context, obj *model.Comment) (*model.Post, error) {
	LogResolverDepth(ctx, "commentResolver.Post", ResolverArgs{
		{Key: "post", Value: obj.PostID},
	})
	posts := r.PostService.Get([]int{obj.PostID})
	if len(posts) == 0 {
		return nil, fmt.Errorf("post not found")
	}
	return posts[0], nil
}

// User is the resolver for the user field.
func (r *commentResolver) User(ctx context.Context, obj *model.Comment) (*model.User, error) {
	LogResolverDepth(ctx, "commentResolver.User", ResolverArgs{
		{Key: "user", Value: obj.UserID},
	})
	users := r.UserService.Get([]int{obj.UserID})
	if len(users) == 0 {
		return nil, fmt.Errorf("user not found")
	}
	return users[0], nil
}

// CreateComment is the resolver for the createComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, input model.NewComment) (*model.Comment, error) {
	LogResolverDepth(ctx, "mutationResolver.CreateComment", ResolverArgs{})
	users := r.UserService.Get([]int{input.UserID})
	if len(users) == 0 {
		return nil, fmt.Errorf("user not found")
	}
	posts := r.PostService.Get([]int{input.PostID})
	if len(posts) == 0 {
		return nil, fmt.Errorf("post not found")
	}

	if input.ID != nil {
		comments := r.CommentService.Get([]int{*input.ID})
		if len(comments) > 0 {
			return nil, fmt.Errorf("comment already exists")
		}
	} else {
		bigliestID := 0
		for id := range r.CommentService.Db.Keys() {
			if id > bigliestID {
				bigliestID = id
			}
		}
		bigliestID++
		input.ID = &bigliestID
	}

	comment := &model.Comment{
		ID:        *input.ID,
		PostID:    input.PostID,
		UserID:    input.UserID,
		Content:   input.Content,
		CreatedAt: time.Now(),
	}

	r.CommentService.Set(comment)

	return comment, nil
}

// DeleteComment is the resolver for the deleteComment field.
func (r *mutationResolver) DeleteComment(ctx context.Context, id int) (bool, error) {
	LogResolverDepth(ctx, "mutationResolver.DeleteComment", ResolverArgs{
		{Key: "id", Value: id},
	})
	comments := r.CommentService.Get([]int{id})
	if len(comments) == 0 {
		return false, fmt.Errorf("comment not found")
	}

	r.CommentService.Delete(id)

	return true, nil
}

// Comments is the resolver for the comments field.
func (r *queryResolver) Comments(ctx context.Context, ids []int) ([]*model.Comment, error) {
	LogResolverDepth(ctx, "queryResolver.Comments", ResolverArgs{
		{Key: "ids", Value: ids},
	})

	comments := r.CommentService.Get(ids)

	// sort the comments by createdAt
	sort.Slice(comments, func(i, j int) bool {
		return comments[i].CreatedAt.Before(comments[j].CreatedAt)
	})

	return comments, nil
}

// CommentCreated is the resolver for the commentCreated field.
func (r *subscriptionResolver) CommentCreated(ctx context.Context) (<-chan *model.Comment, error) {
	LogResolverDepth(ctx, "subscriptionResolver.CommentCreated", ResolverArgs{})
	sub := r.CommentService.CreatedSub.Subscribe(ctx, func(msg *model.Comment) bool {
		return true
	})

	return sub.Chan(), nil
}

// CommentDeleted is the resolver for the commentDeleted field.
func (r *subscriptionResolver) CommentDeleted(ctx context.Context) (<-chan int, error) {
	LogResolverDepth(ctx, "subscriptionResolver.CommentDeleted", ResolverArgs{})
	sub := r.CommentService.DeletedSub.Subscribe(ctx, func(msg int) bool {
		return true
	})

	return sub.Chan(), nil
}

// Comment returns generated.CommentResolver implementation.
func (r *Resolver) Comment() generated.CommentResolver { return &commentResolver{r} }

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

// Subscription returns generated.SubscriptionResolver implementation.
func (r *Resolver) Subscription() generated.SubscriptionResolver { return &subscriptionResolver{r} }

type commentResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
