package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.75

import (
	"context"
	"graphql-demo/internal/graph/generated"
	"graphql-demo/internal/graph/model"
	"sort"

	"github.com/99designs/gqlgen/graphql"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, ids []int) ([]*model.User, error) {
	LogResolverDepth(ctx, "queryResolver.Users", ResolverArgs{
		{Key: "ids", Value: ids},
	})

	users := r.UserService.Get(ids)

	// sort the users by createdAt
	sort.Slice(users, func(i, j int) bool {
		return users[i].CreatedAt.Before(users[j].CreatedAt)
	})

	return users, nil
}

// FullName is the resolver for the fullName field.
func (r *userResolver) FullName(ctx context.Context, obj *model.User) (string, error) {
	return obj.Name, nil
}

// Posts is the resolver for the posts field.
func (r *userResolver) Posts(ctx context.Context, obj *model.User, ids []int) ([]*model.Post, error) {
	LogResolverDepth(ctx, "userResolver.Posts", ResolverArgs{
		{Key: "user", Value: obj.ID},
		{Key: "ids", Value: ids},
	})
	posts := r.PostService.Get(ids)

	// sort the posts by id
	sort.Slice(posts, func(i, j int) bool {
		return posts[i].CreatedAt.Before(posts[j].CreatedAt)
	})

	return posts, nil
}

// Comments is the resolver for the comments field.
func (r *userResolver) Comments(ctx context.Context, obj *model.User, ids []int) ([]*model.Comment, error) {
	LogResolverDepth(ctx, "userResolver.Comments", ResolverArgs{
		{Key: "user", Value: obj.ID},
		{Key: "ids", Value: ids},
	})
	comments := r.CommentService.Get(ids)

	// sort the comments by id
	sort.Slice(comments, func(i, j int) bool {
		return comments[i].CreatedAt.Before(comments[j].CreatedAt)
	})

	return comments, nil
}

// ProvokeError is the resolver for the provokeError field.
func (r *userResolver) ProvokeError(ctx context.Context, obj *model.User) (bool, error) {
	graphql.AddError(ctx, gqlerror.Errorf("you just provoked an error"))
	return false, nil
}

// User returns generated.UserResolver implementation.
func (r *Resolver) User() generated.UserResolver { return &userResolver{r} }

type userResolver struct{ *Resolver }
