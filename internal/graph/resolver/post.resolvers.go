package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.75

import (
	"context"
	"fmt"
	"graphql-demo/internal/graph/generated"
	"graphql-demo/internal/graph/model"
	"sort"
	"time"
)

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, input model.NewPost) (*model.Post, error) {
	LogResolverDepth(ctx, "mutationResolver.CreatePost", ResolverArgs{})
	users := r.UserService.Get([]int{input.UserID})
	if len(users) == 0 {
		return nil, fmt.Errorf("user not found")
	}

	if input.ID != nil {
		posts := r.PostService.Get([]int{*input.ID})
		if len(posts) > 0 {
			return nil, fmt.Errorf("post already exists")
		}
	} else {
		bigliestID := 0
		for id := range r.PostService.Db.Keys() {
			if id > bigliestID {
				bigliestID = id
			}
		}
		bigliestID++
		input.ID = &bigliestID
	}

	post := &model.Post{
		ID:        *input.ID,
		Title:     input.Title,
		Ingress:   input.Ingress,
		Content:   input.Body,
		UserID:    input.UserID,
		Category:  input.Category,
		CreatedAt: time.Now(),
	}

	r.PostService.Set(post)

	return post, nil
}

// DeletePost is the resolver for the deletePost field.
func (r *mutationResolver) DeletePost(ctx context.Context, id int) (bool, error) {
	LogResolverDepth(ctx, "mutationResolver.DeletePost", ResolverArgs{
		{Key: "id", Value: id},
	})
	posts := r.PostService.Get([]int{id})
	if len(posts) == 0 {
		return false, fmt.Errorf("post not found")
	}

	// delete all comments for this post
	for comment := range r.CommentService.Db.Values() {
		if comment.PostID == id {
			r.CommentService.Delete(comment.ID)
		}
	}

	r.PostService.Delete(id)

	return true, nil
}

// Body is the resolver for the body field.
func (r *postResolver) Body(ctx context.Context, obj *model.Post, limit *int32, offset *int32) (string, error) {
	LogResolverDepth(ctx, "postResolver.Body", ResolverArgs{
		{Key: "post", Value: obj.ID},
		{Key: "limit", Value: limit},
		{Key: "offset", Value: offset},
	})
	body := obj.Content
	if offset != nil {
		body = body[*offset:]
	}
	if limit != nil {
		body = body[:*limit]
	}
	return body, nil
}

// User is the resolver for the user field.
func (r *postResolver) User(ctx context.Context, obj *model.Post) (*model.User, error) {
	LogResolverDepth(ctx, "postResolver.User", ResolverArgs{
		{Key: "user", Value: obj.UserID},
	})
	users := r.UserService.Get([]int{obj.UserID})
	if len(users) == 0 {
		return nil, fmt.Errorf("user not found")
	}

	return users[0], nil
}

// Comments is the resolver for the comments field.
func (r *postResolver) Comments(ctx context.Context, obj *model.Post, ids []int) ([]*model.Comment, error) {
	LogResolverDepth(ctx, "postResolver.Comments", ResolverArgs{
		{Key: "post", Value: obj.ID},
		{Key: "ids", Value: ids},
	})
	comments := r.CommentService.Get(ids)

	// sort the comments by id
	sort.Slice(comments, func(i, j int) bool {
		return comments[i].CreatedAt.Before(comments[j].CreatedAt)
	})

	return comments, nil
}

// Posts is the resolver for the posts field.
func (r *queryResolver) Posts(ctx context.Context, ids []int) ([]*model.Post, error) {
	LogResolverDepth(ctx, "queryResolver.Posts", ResolverArgs{
		{Key: "ids", Value: ids},
	})

	posts := r.PostService.Get(ids)

	// sort the posts by createdAt
	sort.Slice(posts, func(i, j int) bool {
		return posts[i].CreatedAt.Before(posts[j].CreatedAt)
	})

	return posts, nil
}

// PostCreated is the resolver for the postCreated field.
func (r *subscriptionResolver) PostCreated(ctx context.Context) (<-chan *model.Post, error) {
	LogResolverDepth(ctx, "subscriptionResolver.PostCreated", ResolverArgs{})
	sub := r.PostService.CreatedSub.Subscribe(ctx, func(msg *model.Post) bool {
		return true
	})

	return sub.Chan(), nil
}

// PostDeleted is the resolver for the postDeleted field.
func (r *subscriptionResolver) PostDeleted(ctx context.Context) (<-chan int, error) {
	LogResolverDepth(ctx, "subscriptionResolver.PostDeleted", ResolverArgs{})
	sub := r.PostService.DeletedSub.Subscribe(ctx, func(msg int) bool {
		return true
	})

	return sub.Chan(), nil
}

// Post returns generated.PostResolver implementation.
func (r *Resolver) Post() generated.PostResolver { return &postResolver{r} }

type postResolver struct{ *Resolver }
