// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
)

type Address struct {
	Street  string `json:"street"`
	City    string `json:"city"`
	ZipCode string `json:"zipCode"`
	Country string `json:"country"`
}

type Mutation struct {
}

type NewComment struct {
	ID      *int   `json:"id,omitempty"`
	PostID  int    `json:"postId"`
	UserID  int    `json:"userId"`
	Content string `json:"content"`
}

type NewPost struct {
	ID       *int     `json:"id,omitempty"`
	UserID   int      `json:"userId"`
	Title    string   `json:"title"`
	Ingress  string   `json:"ingress"`
	Body     string   `json:"body"`
	Category Category `json:"category"`
}

type Preferences struct {
	Theme         string `json:"theme"`
	Notifications bool   `json:"notifications"`
}

type Query struct {
}

type Subscription struct {
}

type Category string

const (
	CategoryTechnology    Category = "Technology"
	CategoryScience       Category = "Science"
	CategoryBusiness      Category = "Business"
	CategoryEntertainment Category = "Entertainment"
	CategoryHealth        Category = "Health"
)

var AllCategory = []Category{
	CategoryTechnology,
	CategoryScience,
	CategoryBusiness,
	CategoryEntertainment,
	CategoryHealth,
}

func (e Category) IsValid() bool {
	switch e {
	case CategoryTechnology, CategoryScience, CategoryBusiness, CategoryEntertainment, CategoryHealth:
		return true
	}
	return false
}

func (e Category) String() string {
	return string(e)
}

func (e *Category) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Category(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Category", str)
	}
	return nil
}

func (e Category) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *Category) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e Category) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type Role string

const (
	RoleAdmin Role = "admin"
	RoleUser  Role = "user"
)

var AllRole = []Role{
	RoleAdmin,
	RoleUser,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RoleUser:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *Role) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e Role) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
