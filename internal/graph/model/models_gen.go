// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
)

// Physical address information for a user.
type Address struct {
	// Street address line.
	Street string `json:"street"`
	// City name.
	City string `json:"city"`
	// Postal/ZIP code.
	ZipCode string `json:"zipCode"`
	// Country name.
	Country string `json:"country"`
}

type Mutation struct {
}

// Input for creating a new comment.
type NewComment struct {
	// Optional ID for the comment. If not provided, one will be generated.
	ID *int `json:"id,omitempty"`
	// ID of the post to comment on.
	PostID int `json:"postId"`
	// ID of the user making the comment.
	UserID int `json:"userId"`
	// The text content of the comment.
	Content string `json:"content"`
}

// Input for creating a new post.
type NewPost struct {
	// Optional ID for the post. If not provided, one will be generated.
	ID *int `json:"id,omitempty"`
	// ID of the user creating the post.
	UserID int `json:"userId"`
	// Title of the post.
	Title string `json:"title"`
	// Brief introduction or summary of the post.
	Ingress string `json:"ingress"`
	// Main content of the post.
	Body string `json:"body"`
	// Category classification of the post.
	Category Category `json:"category"`
}

// User preferences and settings.
type Preferences struct {
	// UI theme preference (e.g., 'light', 'dark').
	Theme string `json:"theme"`
	// Whether the user wants to receive notifications.
	Notifications bool `json:"notifications"`
}

type Query struct {
}

type Subscription struct {
}

// Categories for organizing posts.
type Category string

const (
	// Technology-related posts.
	CategoryTechnology Category = "Technology"
	// Science-related posts.
	CategoryScience Category = "Science"
	// Business-related posts.
	CategoryBusiness Category = "Business"
	// Entertainment-related posts.
	CategoryEntertainment Category = "Entertainment"
	// Health-related posts.
	CategoryHealth Category = "Health"
)

var AllCategory = []Category{
	CategoryTechnology,
	CategoryScience,
	CategoryBusiness,
	CategoryEntertainment,
	CategoryHealth,
}

func (e Category) IsValid() bool {
	switch e {
	case CategoryTechnology, CategoryScience, CategoryBusiness, CategoryEntertainment, CategoryHealth:
		return true
	}
	return false
}

func (e Category) String() string {
	return string(e)
}

func (e *Category) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Category(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Category", str)
	}
	return nil
}

func (e Category) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *Category) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e Category) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

// User roles in the system.
type Role string

const (
	// Administrator with full system access.
	RoleAdmin Role = "admin"
	// Regular user with limited access.
	RoleUser Role = "user"
)

var AllRole = []Role{
	RoleAdmin,
	RoleUser,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RoleUser:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *Role) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e Role) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
